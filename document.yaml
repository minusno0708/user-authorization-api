openapi: '3.0.0'

info:
  version: "1.0.0"
  title: User-Register-API
  
tags:
  - name: user

paths:
  /:
    get:
      description: |
        接続確認用のエンドポイント

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connect successfully"

  /signin:
    post:
      tags:
        - user
      description: |
        新しいユーザーを登録する

      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            required:
              - user_id
              - password
            properties:
              user_id:
                type: "string"
              username:
                type: "string"
              password:
                type: "string"

      responses:
        201:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyValidationError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserAlreadyExistsError'
              examples:
                response1:
                  summary: 既に存在するユーザーIDの場合
                  value:
                    message: User already exists


  /user/{user_id}: 
    get:
      tags:
        - user
      description: |
        ユーザー情報を取得する

      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              password:
                type: "string"

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be acquired"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/BodyValidationError'
                  - $ref: '#/components/responses/PassIncorrectError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: パスワードが正しくない場合
                  value:
                    message: Password is incorrect
        404:
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/UserNotFoundError'
              examples:
                response1:
                  summary: 存在しないユーザーIDの場合
                  value:
                    message: User Not Found

    put:
      tags:
        - user
      description: |
        ユーザー情報を更新する

      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              password:
                type: "string"

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be updated"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyValidationError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserAlreadyExistsError'
              examples:
                response1:
                  summary: 既に存在するユーザーIDの場合
                  value:
                    message: User already exists

  /delete/{user_id}:
    delete:
      tags:
        - user
      description: |
        ユーザー情報を削除する
      
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              password:
                type: "string"
      
      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be deleted"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BodyValidationError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserAlreadyExistsError'
              examples:
                response1:
                  summary: 既に存在するユーザーIDの場合
                  value:
                    message: User already exists

components:
  responses:
    BodyDoesNotExistError:
      type: object
      properties:
        body_not_exists:
          type: object
          properties:
            message:
              type: string
              example: "Body does not exist"
    BodyValidationError:
      type: object
      properties:
        unauthrized:
          type: object
          properties:
            message:
              type: string
              example: "Body is not valid"
    PassIncorrectError:
      type: object
      properties:
        pass_incorrect:
          type: object
          properties:
            message:
              type: string
              example: "Password is incorrect"
    UserAlreadyExistsError:
      type: object
      properties:
        user_already_exist:
          type: object
          properties:
            message:
              type: string
              example: "User already exists"
    UserNotFoundError:
      type: object
      properties:
        user_does_not_exist:
          type: object
          properties:
            message:
              type: string
              example: "User not found"
    UserDoesNotExistError:
      type: object
      properties:
        user_does_not_exist:
          type: object
          properties:
            message:
              type: string
              example: "User does not exist"
