openapi: '3.0.0'

info:
  version: "1.0.0"
  title: User-Register-API
  
tags:
  - name: user
  - name: auth

paths:
  /:
    get:
      description: |
        接続確認用のエンドポイント

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connect successfully"

  /signup:
    post:
      tags:
        - user
      description: |
        新しいユーザーを登録する

      requestBody:
        description: ユーザー情報
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - password
              properties:
                user_id:
                  type: "string"
                  example: "user_id"
                username:
                  type: "string"
                  example: "username"
                password:
                  type: "string"
                  example: "password"

      responses:
        201:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyValidationError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAlreadyExistsError'
              examples:
                response1:
                  summary: 既に存在するユーザーIDの場合
                  value:
                    message: User already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionError'
              examples:
                response1:
                  summary: データベースへの接続エラー
                  value:
                    message: Database connection error


  /user: 
    get:
      tags:
        - user
      description: |
        ユーザー情報を取得する
      requestBody:
        description: アクセストークン
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: "string"
                  example: "xxxxxxxxxxxxxxxxxxxxxxxx"

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be acquired"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BodyValidationError'
                  - $ref: '#/components/schemas/FailedAuthenticateError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: 認証に失敗した場合
                  value:
                    message: Failed to authenticate
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionError'
              examples:
                response1:
                  summary: データベースへの接続エラー
                  value:
                    message: Database connection error

    put:
      tags:
        - user
      description: |
        ユーザー情報を更新する
      requestBody:
        description: ユーザー情報とアクセストークン
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - token
              properties:
                username:
                  type: "string"
                  example: "new_username"
                token:
                  type: "string"
                  example: "xxxxxxxxxxxxxxxxxxxxxxxx"

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be updated"
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: "user_id"
                      username:
                        type: string
                        example: "username"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BodyValidationError'
                  - $ref: '#/components/schemas/FailedAuthenticateError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: 認証に失敗した場合
                  value:
                    message: Failed to authenticate
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionError'
              examples:
                response1:
                  summary: データベースへの接続エラー
                  value:
                    message: Database connection error
    delete:
      tags:
        - user
      description: |
        ユーザー情報を削除する
      requestBody:
        description: アクセストークン
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: "string"
                  example: "xxxxxxxxxxxxxxxxxxxxxxxx"
      
      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User can be deleted"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BodyValidationError'
                  - $ref: '#/components/schemas/FailedAuthenticateError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: 認証に失敗した場合
                  value:
                    message: Failed to authenticate
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionError'
              examples:
                response1:
                  summary: データベースへの接続エラー
                  value:
                    message: Database connection error
  /signin:
    post:
      tags:
        - auth
      description: |
        ログイン用のエンドポイント

      requestBody:
        description: ユーザー情報
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - password
              properties:
                user_id:
                  type: "string"
                  example: "user_id"
                password:
                  type: "string"
                  example: "password"

      responses:
        201:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token can be acquired"
                  token:
                    type: string
                    example: ""
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BodyValidationError'
                  - $ref: '#/components/schemas/PassIncorrectError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: ユーザーIDまたはパスワードが正しくない場合
                  value:
                    message: User ID or password is incorrect
        
  /signout:
    delete:
      tags:
        - auth
      description: |
        ログアウト用のエンドポイント

      requestBody:
        description: トークン
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: "string"
                  example: ""

      responses:
        200:
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token can be deleted"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyDoesNotExistError'
              examples:
                response1:
                  summary: Bodyが存在しない場合
                  value:
                    message: Body does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BodyValidationError'
                  - $ref: '#/components/schemas/UserOrPassIncorrectError'
              examples:
                response1:
                  summary: Bodyの形式が正しくない場合
                  value:
                    message: Body is not valid
                response2:
                  summary: 認証に失敗した場合
                  value:
                    message: Failed to authenticate

components:
  schemas:
    BodyDoesNotExistError:
      type: object
      properties:
        body_does_not_exists:
          type: object
          properties:
            message:
              type: string
              example: "Body does not exist"
    BodyValidationError:
      type: object
      properties:
        body_validation:
          type: object
          properties:
            message:
              type: string
              example: "Body is not valid"
    PassIncorrectError:
      type: object
      properties:
        pass_incorrect:
          type: object
          properties:
            message:
              type: string
              example: "Password is incorrect"
    UserAlreadyExistsError:
      type: object
      properties:
        user_already_exists:
          type: object
          properties:
            message:
              type: string
              example: "User already exists"
    UserNotFoundError:
      type: object
      properties:
        user_not_found:
          type: object
          properties:
            message:
              type: string
              example: "User not found"
    DatabaseConnectionError:
      type: object
      properties:
        database_connection_error:
          type: object
          properties:
            message:
              type: string
              example: "Database connection error"
    FailedAuthenticateError:
      type: object
      properties:
        failed_authenticate_error:
          type: object
          properties:
            message:
              type: string
              example: "Failed to authenticate"
    UserOrPassIncorrectError:
      type: object
      properties:
        id_or_pass_incorrect:
          type: object
          properties:
            message:
              type: string
              example: "User ID or password is incorrect"
